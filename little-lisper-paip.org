#+TITLE: A Little Schemer's Guide to AI Programming
#+AUTHOR: Generated from PAIP by Peter Norvig
#+OPTIONS: ^:nil
#+PROPERTY: header-args:lisp :mkdirp t :tangle yes


* Chapter 1
Here is the response in a valid Org-mode format:

**ELIZA and PARRY: Dialog Systems that Model Belief**

ELIZA and PARRY are two early dialog systems that model belief, developed by Joseph Weizenbaum and others.

**Question:** What is ELIZA?

**Answer:** ELIZA is a simple chatbot that uses a set of rules to respond to user input. It was developed in 1966 by Joseph Weizenbaum at MIT.

**Exercise 5.2: Experiment with ELIZA**

Experiment with the version of ELIZA provided. Show some exchanges where it performs well, and some where it fails. Try to characterize the difference between these responses.

**Solution:**
```
(+begin_src lisp
  (defparameter *eliza-rules* '((?hello . "Hello!") (?how-are-you . "I'm fine")))
  (defparameter *input*

    "Hello, how are you?"))

(defparameter *bindings* nil)

(defun eliza-rule-match (pattern input bindings)
  (if (equal (car pattern) '?(any))
      (progn
        (setf bindings (cons 'foo bindings)) ; assume any character matches anything
        t)
      (cond ((member (car pattern) *eliza-rules*)
             (let ((response (cdr (assoc (car pattern) *eliza-rules*))))
               response))
            (t
             nil))))

(defun eliza (input &optional bindings)
  (loop for pattern across *eliza-rules*
        do (if (funcall 'eliza-rule-match pattern input bindings)
                (progn
                  (setf bindings (append bindings (list (car pattern))))
                  input))
            else (return nil)))

(eliza *input*))

(+end_src lisp)

```

**Answer:** The ELIZA program uses a set of rules to match user input. It checks each rule in turn, and if the input matches the first element of the rule, it returns the second element of the rule as the response.

**Exercise 5.3: Define new rules for ELIZA**

Define a new set of rules that make ELIZA give stereotypical responses to some situation other than the doctor-patient relationship. Or, write a set of rules in a language other than English. Test and debug your new rule set.

**Solution:**
```
(+begin_src lisp
  (defparameter *new-rules* '((?greeting . "Hello!") (?goodbye . "Goodbye!")))

  (defparameter *input*

    "?Hello, how are you?"

  ))

(defparameter *bindings* nil)

(defun eliza-rule-match (pattern input bindings)
  (if (equal (car pattern) '?(any))
      (progn
        (setf bindings (cons 'foo bindings)) ; assume any character matches anything
        t)
      (cond ((member (car pattern) *new-rules*)
             (let ((response (cdr (assoc (car pattern) *new-rules*))))
               response))
            (t
             nil))))

(defun eliza (input &optional bindings)
  (loop for pattern across *new-rules*
        do (if (funcall 'eliza-rule-match pattern input bindings)
                (progn
                  (setf bindings (append bindings (list (car pattern))))
                  input))
            else (return nil)))

(eliza *input*)

(+end_src lisp)

```

**Answer:** The new rules define two new responses, "Hello!" and "Goodbye!". These rules are applied to the user input, which is "?Hello, how are you?".

* Chapter 2
Here is the response in a valid Org mode format:

**Implementation of the Prolog Interpreter**

The implementation of the Prolog interpreter is built around several key concepts: representation of rules and facts, indexing of clauses, and data base management.

**Representation of Clauses**

Clauses are represented as cons cells holding the head and body. For facts, the body will be empty.

```lisp
(defun clause-head (clause) (first clause))
(defun clause-body (clause) (rest clause))
```

**Indexing of Clauses**

The data base is indexed in terms of its heads. Each clause will be stored on the property list of the predicate of the head of the clause.

```lisp
(defun get-clauses (pred) (get pred 'clauses))
(defun predicate (relation) (first relation))

(defvar *db-predicates* nil "A list of all predicates stored in the database.")
```

**Adding a New Clause**

The work is split up into the macro <-, which provides the user interface, and a function add-clause that does the work.

```lisp
(defmacro <- (&rest clause)
  "Add a clause to the data base."

'(add-clause '.clause))

(defun add-clause (clause)
  "Add a clause to the data base, indexed by head's predicate."
```

The predicate must be a non-variable symbol. The function checks this and pushes it onto the list of predicates.

```lisp
(let ((pred (predicate (clause-head clause))))
  (assert (and (symbolp pred) (not (variable-p pred)))) 
  (pushnew pred *db-predicates*) 
  (setf (get pred 'clauses)
        (nconc (get-clauses pred) (list clause)))
```

**Removing Clauses**

The data base will be complete with a function to remove clauses.

```lisp
(defun clear-db ()
  "Remove all clauses from the data base."
  (setf *db-predicates* nil)
  (dolist (pred *db-predicates*)
    (setf (get pred 'clauses) nil)))
```

**Top-Level Macros and Functions**

The top-level macros and functions provide a interface to the Prolog interpreter.

```lisp
(defmacro prove (&rest goals)
  "Prove the goals, and print variables readably.")

(defun get-solutions (goals)
  "Return a list of possible solutions to goal.")
```

**Special Variables**

Some special variables provide access to important information about the data base.

```lisp
(defvar *db-predicates* nil "A list of all predicates stored in the database.")

(defvar *occurs-check* t "Should we check for circular unifications?")
```

This concludes the overview of the implementation of the Prolog interpreter.

* Chapter 3
Here is the code in a valid Org mode document:

**Question 1: What is a Rule?**

A rule is a set of premises that, when satisfied, can be used to draw conclusions.

**Answer**

In our system, a rule consists of three parts:

*   Premises: A list of conditions that must be true for the rule to apply.
*   Conclusions: A list of statements that can be drawn from the premises.
*   Certainty Factor (CF): A value between 0 and 1 that represents the confidence in the truth of the conclusions.

**Code**

```lisp
(defstruct (rule (:print-function print-rule)) 
    number premises conclusions cf)

(let ((rules (make-hash-table))) 

(defun put-rule (rule) 
"Put the rule in a table, indexed under each 
parm in the conclusion." 
(dolist (conclusion (rule-conclusions rule)) 

(push rule (gethash (first conclusion) rules))) 
rule) 

(defun get-rules (parm) 
"A list of rules that help determine this parameter." 
(gethash parm rules)) 

(defun clear-rules () (clrhash rules))
```

**Question 2: How do we Find Out the Value of a Parameter?**

We can find out the value of a parameter in three ways:

1.  **If the value is already stored in the database**, we don't need to ask any questions.
2.  **If the `parm-ask-first` property of the parameter is set to true**, we ask the user for an answer.
3.  **Otherwise**, we use rules to determine the value.

**Answer**

The `find-out` function implements this behavior:

```lisp
(defun find-out (parm &optional (inst (get-db 'current-instance))) 
"Find the value(s) of this parameter for this instance, 
unless the values are already known. 
Some parameters we ask first; others we use rules first." 
(or (get-db '(known .parm .inst)) 

(put-db '(known .parm .inst) 

(if (parm-ask-first (get-parm parm)) 
(or (ask-vals parm inst) (use-rules parm)) 
(or (use-rules parm) (ask-vals parm inst)))))
```

**Question 3: How do we Use Rules?**

We use rules to determine the value of a parameter when `parm-ask-first` is set to false.

**Answer**

The `use-rule` function implements this behavior:

```lisp
(defun use-rule (rule) 
"Apply a rule to the current situation." 
;; Keep track of the rule for the explanation system: 
(put-db 'current-rule rule) 
;; If any premise is known false, give up. 
;; If every premise can be proved true, then 

draw conclusions (weighted with the certainty factor), 
(unless (some #'reject-premise (rule-premises rule)) 
(let ((cf (satisfy-premises (rule-premises rule) true))) 
(when (true-p cf) 
(dolist (conclusion (rule-conclusions rule)) 
(conclude conclusion (* cf (rule-cf rule)))) 
cf))))
```

**Question 4: How do we Evaluate a Condition?**

We evaluate a condition using the current state of the database.

**Answer**

The `eval-condition` function implements this behavior:

```lisp
(defun eval-condition (condition) 
"Evaluate a single condition, returning its certainty factor." 
;; cf-so-far is an accumulator of certainty factors 
(cond ((null condition) 1.0) 

((not (true-p (eval-premise (first condition)))) false) 

(t (+ (eval-premise (first condition)) (* (eval-condition (second condition)) (eval-premise (second condition)))))))
```

**Question 5: How do we Reject a Premise?**

We reject a premise if it is clearly false without seeking additional information.

**Answer**

The `reject-premise` function implements this behavior:

```lisp
(defun reject-premise (premise) 
"Reject a premise if it is clearly false." 
(if (not (true-p (eval-premise premise))) 

(put-db 'rejected-premises premise) 

nil))
```

This concludes the progressive learning style of this code explanation.

* Chapter 4
I'll help you create a valid Org-mode document with the requested structure.

Here is the first part of the document:
```
# Adjectives
## Concepts

Adjectives are words that modify nouns or pronouns by giving more information about them.
They can describe qualities, characteristics, or attributes of a noun or pronoun.

### Examples

*   `(word big adj big)`
*   `(word bad adj bad)`

## Tangling

To demonstrate tangling, we will show how to represent the same concept in different ways:

```lisp
#+begin_src lisp
(defparameter *big*
  (make-string 3 :initial-element #\B))
```
In this example, `*big*` is a string that contains three characters: `\B`, which represents the character "B". When we print out `*big*`, it will display as "(big)".

```lisp
#+begin_src lisp
(defparameter *small*
  (make-string 3 :initial-element #\s))
```
Similarly, `*small*` is a string that contains three characters: `\s`, which represents the character "s". When we print out `*small*`, it will display as "(small)".

## Building on Previous Concepts

We have now learned about adjectives and how they can be represented in code using strings. We also saw an example of tangling, where the same concept is represented in different ways.

Please let me know if you would like to proceed with the next section: Adverbs.

* Chapter 5
Here is the rewritten version of the text in a question-and-answer format, with code blocks using `#+begin_src lisp` and proper tangling:

**What is Org Mode?**
Org Mode is a mode for editing plain text files that can be used to create documents, notes, and tasks. It provides a wide range of features and customization options.

**Key Features of Org Mode**

### 1. Customizable

Org Mode is highly customizable through its powerful syntax and various features such as:

* **Headers**: Define headers with special characters `#+H`, `#+H:`, `##`
* **Tags**: Use tags to categorize and filter content
* **Links**: Create links to other files, URLs, or email addresses

```lisp
#+begin_src lisp
( define-key (kbd "C-c") 'org-copy-dispatch 'copy-dispatch )
```

### 2. Advanced Editing Features

Org Mode provides advanced editing features such as:

* **Code Blocks**: Use `#+begin_src` to embed code blocks
* **Indentation**: Auto-indent and unindent text with `C-k`
* **Syntax Highlighting**: Enable syntax highlighting with `C-c C-b`

```lisp
#+begin_src lisp
( set-face-attribute 'default nil :font "Consolas" )
```

### 3. Customization Options

Org Mode offers various customization options such as:

* **Variables**: Define variables using `setf` or `define-constant`
* **Functions**: Create custom functions using `defun`
* **Macros**: Define macros with `defmacro`

```lisp
#+begin_src lisp
( defparameter *foo* 42 )
```

**How do I create a new Org Mode file?**
To create a new Org Mode file, follow these steps:

1. Open your text editor or IDE.
2. Create a new file and save it with a `.org` extension (e.g., `example.org`).
3. Load the file into Emacs or another compatible editor.

**What is the Warren Abstract Machine (WAM)?**
The Warren Abstract Machine (WAM) is a model for execution of recursive functions, developed by David Warren in 1977. It provides a simple and efficient way to implement recursive functions using loops.

```lisp
#+begin_src lisp
( defparameter *wam* '(0 . 1))
```

Let's continue with the next question...

**What is Unification?**
Unification is a process of matching two or more terms, typically used in automated reasoning and theorem proving. In Org Mode, unification can be achieved using the `unify` function.

```lisp
#+begin_src lisp
( unify '(a b) '(x y) )
```

Please let me know if you'd like to proceed with the next question or topic!
